-- Rayfield UI Setup
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "volleyball legendary",
    LoadingTitle = "script",
    LoadingSubtitle = "by bro_broa",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "BallHitboxMod",
        FileName = "Config"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
})

-- Create the main tab
local MainTab = Window:CreateTab("Main", 4483362458) -- You can change the icon ID if needed

-- Variables
local hitboxEnabled = false
local targetSize = 100
local originalSizes = {}
local activeConnections = {}

-- Main function to modify ball hitboxes
local function modifyBallHitboxes()
    -- Clear previous connections
    for _, connection in pairs(activeConnections) do
        connection:Disconnect()
    end
    activeConnections = {}
    
    if not hitboxEnabled then
        -- Restore original sizes if disabling
        for part, originalSize in pairs(originalSizes) do
            if part and part.Parent then
                pcall(function()
                    part.Size = originalSize
                    part.Transparency = 0
                    part.Color = Color3.fromRGB(255, 255, 255)
                    part.Material = Enum.Material.Plastic
                end)
            end
        end
        originalSizes = {}
        return
    end
    
    -- Function to process a ball part
    local function processPart(part)
        if not originalSizes[part] then
            originalSizes[part] = part.Size
        end
        
        pcall(function()
            part.Size = Vector3.new(targetSize, targetSize, targetSize)
            part.Transparency = 0.5
            part.Color = Color3.fromRGB(255, 0, 0)
            part.Material = Enum.Material.Neon
            part.CanCollide = false
        end)
    end
    
    -- Function to process a ball model
    local function processBall(ball)
        for _, descendant in pairs(ball:GetDescendants()) do
            if descendant:IsA("BasePart") then
                processPart(descendant)
            end
        end
    end
    
    -- Process existing balls
    for _, obj in pairs(workspace:GetChildren()) do
        if obj.Name:find("CLIENT_BALL_") and obj:IsA("Model") then
            processBall(obj)
        end
    end
    
    -- Set up listeners for new balls
    local childAddedConnection = workspace.ChildAdded:Connect(function(child)
        if child.Name:find("CLIENT_BALL_") and child:IsA("Model") then
            processBall(child)
            
            -- Listen for new parts in this ball
            local descendantConnection = child.DescendantAdded:Connect(function(descendant)
                if descendant:IsA("BasePart") then
                    processPart(descendant)
                end
            end)
            
            table.insert(activeConnections, descendantConnection)
        end
    end)
    
    table.insert(activeConnections, childAddedConnection)
end

-- Create UI elements in the Main tab
local Toggle = MainTab:CreateToggle({
    Name = "Change Ball Hitbox",
    CurrentValue = false,
    Flag = "HitboxToggle",
    Callback = function(Value)
        hitboxEnabled = Value
        modifyBallHitboxes()
        
        -- Update toggle text based on state
        if Toggle then
            Toggle:Set(
                ("Change Ball Hitbox: %s"):format(Value and "ON" or "OFF"),
                Value
            )
        end
    end,
})

local Input = MainTab:CreateInput({
    Name = "Ball Hitbox Size",
    PlaceholderText = "enter number",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local newSize = tonumber(Text)
        if newSize and newSize > 0 then
            targetSize = newSize
            if hitboxEnabled then
                modifyBallHitboxes()
            end
            Rayfield:Notify({
                Title = "Size Updated",
                Content = ("Hitbox size set to: %d"):format(newSize),
                Duration = 2,
                Image = 4483362458,
            })
        else
            Rayfield:Notify({
                Title = "Invalid Size",
                Content = "Please enter a valid number greater than 0",
                Duration = 3,
                Image = 4483362458,
            })
        end
    end,
})

-- Set default value
Input:Set("100")

-- Initialize if needed
if hitboxEnabled then
    modifyBallHitboxes()
end

Rayfield:LoadConfiguration()
